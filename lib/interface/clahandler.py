#!/usr/bin/env python
from lib.src.webcam import Webcam

class CLA_Handler(object):
    ''' Class to parse command line arguments '''

    def __init__(self):
        # All options that CLAs can specify
        self.commands_map = {
                            "dev_num" : 0,
                            "action" : "read",
                            "show" : True,
                            "write": False,
                            "contour": False,
                        }

    def parse_dev_num(self, cla):
        ''' -V n : Sets the device number of the webcam '''

        if "-V" in cla:
            loc = cla.find("-V")
            cam_num_loc = loc + 3

            dev_num = cla[cam_num_loc]

            if dev_num.isdigit():
                self.commands_map["dev_num"] = int(dev_num)
            else:
                raise AssertionError("Error - " + dev_num + " is not a valid device number")

    def parse_action(self, cla):
        ''' Get the action to take '''

        # -W -M : Record Motion
        if "-W" in cla and "-M" in cla:
            self.commands_map["action"] = "motion"
            self.commands_map["write"] = True
            self.commands_map["show"] = False
        # -W : Record
        elif "-W" in cla:
            self.commands_map["action"] = "write"
            self.commands_map["show"] = False
        # -M : View Motion
        elif "-M" in cla:
            self.commands_map["action"] = "motion"

    def parse_show_contour(self, cla):
        ''' Get optional arguments '''

        # -S : Show window
        if "-S" in cla:
            self.commands_map["show"] = True

        # -C : Show contour
        if "-C" in cla:
            self.commands_map["contour"] = True

    def parse(self, cla):
        ''' Parse CLAs '''
        try:
            # Device Number
            self.parse_dev_num(cla)
            # Action
            self.parse_action(cla)
            # Optional Arguments
            self.parse_show_contour(cla)

            return self.commands_map

        except AssertionError as e:
            print str(e)

class Dispatcher(object):
    ''' Run commands generated by CLA_Handler '''

    def run(self, commands):
        ''' Run parsed commands '''

        # Open webcam
        try:
            webcam = Webcam(commands["dev_num"])
        except Exception:
            print "Could not open a webcam with device number " + commands["dev_num"]

        # Execute command with optional arguments
        if commands["action"] == "read":
            try:
                webcam.read()
            except KeyboardInterrupt:
                webcam.close()
        elif commands["action"] == "write":
            try:
                webcam.write(show=commands["show"])
            except KeyboardInterrupt:
                webcam.close()
        elif commands["action"] == "motion":
            try:
                webcam.motion_capture(show=commands["show"],
                                        write=commands["write"],
                                        contour=commands["contour"])
            except KeyboardInterrupt:
                webcam.close()

        # Close webcam
        webcam.close()

